diff -rNw -U 0 oofem-2.5/bindings/python/oofemlib.cpp oofem-2.5/bindings/python/oofemlib.cpp
--- oofem-2.5/bindings/python/oofemlib.cpp
+++ oofem-2.5/bindings/python/oofemlib.cpp
@@ -60,0 +61 @@
+#include "nodalload.h"
@@ -224,0 +226,2 @@
+std::vector<double>::const_iterator (FloatArray::*floatarray_begin)() const = &FloatArray::begin;
+std::vector<double>::const_iterator (FloatArray::*floatarray_end)() const = &FloatArray::end;
@@ -264,0 +268 @@
+        .def("__iter__", bp::range(floatarray_begin,floatarray_end))
@@ -324,0 +329,2 @@
+std::vector<int>::const_iterator (IntArray::*intarray_begin)() const = &IntArray::begin;
+std::vector<int>::const_iterator (IntArray::*intarray_end)() const = &IntArray::end;
@@ -343,0 +350 @@
+        .def("__iter__", bp::range(intarray_begin,intarray_end))
@@ -454 +461,11 @@
-Element* (SpatialLocalizer::*giveElementContainingPoint_1)(const FloatArray &coords, const IntArray* regionList) = &SpatialLocalizer::giveElementContainingPoint;
+class PySpatialLocalizer : public SpatialLocalizer, public wrapper<SpatialLocalizer>
+{
+public:
+    PySpatialLocalizer(Domain* d) : SpatialLocalizer(d) {}
+    virtual Element* giveElementContainingPoint(const FloatArray &coords, const IntArray* regionList) {
+        return this->get_override("giveElementContainingPoint")(coords,regionList);
+    }
+};
+
+Element* (SpatialLocalizer::*giveElementContainingPoint_1)(const FloatArray&, const IntArray*) = &SpatialLocalizer::giveElementContainingPoint;
+
@@ -457 +474 @@
-    class_<SpatialLocalizer, boost::noncopyable>("SpatialLocalizer", no_init)
+    class_<PySpatialLocalizer, boost::noncopyable>("SpatialLocalizer", no_init)
@@ -459,4 +476,3 @@
-        // XXX .def("giveElementCloseToPoint", &SpatialLocalizer::giveElementCloseToPoint, return_internal_reference<>())
-        .def("giveElementClosestToPoint", &SpatialLocalizer::giveElementClosestToPoint, return_internal_reference<>())
-        .def("init", &SpatialLocalizer::init)
-        .def("giveClassName", &SpatialLocalizer::giveClassName)
+        .def("giveElementClosestToPoint", &PySpatialLocalizer::giveElementClosestToPoint, return_internal_reference<>())
+        .def("init", &PySpatialLocalizer::init)
+        .def("giveClassName", &PySpatialLocalizer::giveClassName)
@@ -588,0 +605,2 @@
+        .def("resizeModules", &ExportModuleManager::resizeModules)
+        .def("setModule", &ExportModuleManager::setModule)
@@ -614,0 +633 @@
+        .def("initialize", &ExportModule::initialize)
@@ -722,0 +742 @@
+        .def("giveDomainType", &Domain::giveDomainType)
@@ -989,0 +1010,18 @@
+void pyclass_NodalLoad()
+{
+    class_<NodalLoad, bases<Load>, boost::noncopyable >("NodalLoad", init<int, Domain*>())
+        .def("setComponentArray", &NodalLoad::setComponentArray)
+        .def("GiveCopyOfComponentArray", &NodalLoad::GiveCopyOfComponentArray, return_value_policy<manage_new_object>())
+        .def("computeValueAt", pure_virtual( &NodalLoad::computeValueAt))
+        .def("setFunction", &NodalLoad::setFunction)
+        ;
+}
+
+/*****************************************************
+* InitialCondition
+*****************************************************/
+void pyclass_InitialCondition()
+{
+    class_<InitialCondition, bases<FEMComponent>, boost::noncopyable >("InitialCondition", no_init)
+        ;
+}
@@ -1422,0 +1461 @@
+	 /*
@@ -1442,0 +1482,40 @@
+	*/
+	bp::str ret = "";
+	bp::list items = kw.items();
+	for (int i=0; i<bp::len(items); i++) {
+		const bp::object& okey = items[i][0];
+		str key(okey);
+		key = key.lower();
+		if (key == "f_t") key = "f(t)";
+		ret += " ";
+		ret += key;
+		const bp::object& val = items[i][1];
+		auto oname = val.attr("__class__").attr("__name__");
+		string name = bp::extract<string>(oname)();
+		if (name == "bool") continue;
+		else if (name == "int" || name == "float" || name == "str") {
+			ret += " ";
+			ret += bp::str(val);
+		}
+		else if (name == "list" || name == "tuple") {
+			ret += " ";
+			int l = len(val);
+			ret += str(l);
+			for (int j=0; j<l; j++) {
+				const bp::object& val2 = val[j];
+				auto oname2 = val2.attr("__class__").attr("__name__");
+				string name2 = bp::extract<string>(oname2)();
+				ret += " ";
+				if (name2 == "int" || name2 == "float" || name2 == "str") {
+					ret += str(val2);
+				} else {
+					ret += str(val2.attr("giveNumber")());
+				}
+			}
+		}
+		else {
+			ret += " ";
+			ret += str(val.attr("giveNumber")());
+		}
+	}
+	ret = ret.lower();
@@ -1445 +1524 @@
-    return OOFEMTXTInputRecord( 0, ( extract<string>(temp["ret"])() ) );
+    return OOFEMTXTInputRecord( 0, extract<string>(ret)() );
@@ -1645 +1724,9 @@
-object nodalLoad(bp::tuple args, bp::dict kw) { return CreateBCOfType("nodalload",args,kw); }
+object nodalLoad(bp::tuple args, bp::dict kw)
+{
+    int number =     len(args)>0? extract<int>(args[0])() : 0;
+    Domain *domain = len(args)>1? extract<Domain*>(args[1])() : NULL;
+    NodalLoad *load = new NodalLoad(number,domain);
+    OOFEMTXTInputRecord ir = makeOOFEMTXTInputRecordFrom(kw);
+    load->initializeFrom(&ir);
+    return object(ptr(load));
+}
@@ -1647,0 +1735,17 @@
+/*****************************************************
+* InitialCondition
+*****************************************************/
+// intialCondition(aClass,domain=defaultDomain,**kw)
+object initialCondition(bp::tuple args, bp::dict kw)
+{
+    string aClass = extract<string>(args[0])();
+    int number =     len(args)>1? extract<int>(args[1])() : 0;
+    Domain *domain = len(args)>2? extract<Domain*>(args[2])() : NULL;
+    InitialCondition *ic = classFactory.createInitialCondition(aClass.c_str(),number,domain);
+    if (ic==NULL) { OOFEM_LOG_ERROR("InitialCondition: wrong input data"); }
+    OOFEMTXTInputRecord ir = makeOOFEMTXTInputRecordFrom(kw);
+    ic->initializeFrom(&ir);
+    return object(ptr(ic));
+}
+
+
@@ -1716,0 +1821 @@
+object constantFunction(bp::tuple args, bp::dict kw) { return CreateLoadTimeFunctionOfType("constantfunction",args,kw); }
@@ -1798,0 +1904,2 @@
+    pyclass_NodalLoad();
+    pyclass_InitialCondition();
@@ -1857,0 +1965 @@
+    def("initialCondition", raw_function(initialCondition,0));
@@ -1866,0 +1975 @@
+    def("constantFunction", raw_function(constantFunction,0));
diff -rNw -U 0 oofem-2.5/src/oofemlib/exportmodulemanager.h oofem-2.5/src/oofemlib/exportmodulemanager.h
--- oofem-2.5/src/oofemlib/exportmodulemanager.h
+++ oofem-2.5/src/oofemlib/exportmodulemanager.h
@@ -71,0 +72,8 @@
+
+    void setModule(int i, ExportModule* obj) {
+        moduleList[i-1].reset(obj);
+    }
+
+    void resizeModules(int _newSize) {
+        moduleList.resize(_newSize);
+    }
diff -rNw -U 0 oofem-2.5/src/oofemlib/generalboundarycondition.h oofem-2.5/src/oofemlib/generalboundarycondition.h
--- oofem-2.5/src/oofemlib/generalboundarycondition.h
+++ oofem-2.5/src/oofemlib/generalboundarycondition.h
@@ -160,0 +161,2 @@
+    void setFunction(int i) { timeFunction = i; }
+
diff -rNw -U 0 oofem-2.5/src/oofemlib/load.C oofem-2.5/src/oofemlib/load.C
--- oofem-2.5/src/oofemlib/load.C
+++ oofem-2.5/src/oofemlib/load.C
@@ -159,0 +160,8 @@
+FloatArray*
+Load :: GiveCopyOfComponentArray() const
+{
+    FloatArray* ret = new FloatArray();
+    ret->beCopyOf(componentArray);
+    return ret;
+}
+
diff -rNw -U 0 oofem-2.5/src/oofemlib/load.h oofem-2.5/src/oofemlib/load.h
--- oofem-2.5/src/oofemlib/load.h
+++ oofem-2.5/src/oofemlib/load.h
@@ -178,0 +179 @@
+    FloatArray* GiveCopyOfComponentArray() const;
diff -rNw -U 0 oofem-2.5/src/sm/EngineeringModels/deidynamic.C oofem-2.5/src/sm/EngineeringModels/deidynamic.C
--- oofem-2.5/src/sm/EngineeringModels/deidynamic.C
+++ oofem-2.5/src/sm/EngineeringModels/deidynamic.C
@@ -137,0 +138 @@
+    deltaT = tStep->giveTimeIncrement();
diff -rNw -U 0 oofem-2.5/src/sm/EngineeringModels/nldeidynamic.C oofem-2.5/src/sm/EngineeringModels/nldeidynamic.C
--- oofem-2.5/src/sm/EngineeringModels/nldeidynamic.C
+++ oofem-2.5/src/sm/EngineeringModels/nldeidynamic.C
@@ -196 +196 @@
-
+    deltaT = tStep->giveTimeIncrement();
diff -rNw -U 0 oofem-2.5/src/sm/Materials/isolinearelasticmaterial.C oofem-2.5/src/sm/Materials/isolinearelasticmaterial.C
--- oofem-2.5/src/sm/Materials/isolinearelasticmaterial.C
+++ oofem-2.5/src/sm/Materials/isolinearelasticmaterial.C
@@ -156,4 +155,0 @@
-
-    if ( ( tStep->giveIntrinsicTime() < this->castingTime ) ) {
-        answer.times(1. - this->preCastStiffnessReduction);
-    }
